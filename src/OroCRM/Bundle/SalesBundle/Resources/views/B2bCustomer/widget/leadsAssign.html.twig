<div class="widget-content grid-widget-content">
    {% import 'OroDataGridBundle::macros.html.twig' as dataGrid %}
    {% set gridName = 'sales-b2bcustomer-lead-grid' %}
    {% set params = {
        'customer' : b2bCustomer,
        '_parameters' : {
            'data_in':     app.request.get('added')|split(','),
            'data_not_in': app.request.get('removed')|split(',')
        }
    } %}

    <style type="text/css">
        .grid-widget-content .grid,
        .grid-widget-content .table {
            margin-bottom: 0;
        }
    </style>

    {% block content %}
        {{ dataGrid.renderGrid(gridName, params) }}
        <input type="hidden" name="appendLeads" id="appendLeads" value="{{ app.request.get('added') }}" />
        <input type="hidden" name="removeLeads" id="removeLeads" value="{{ app.request.get('removed') }}" />
    {% endblock %}

    <script type="text/javascript">
        {% set wid = app.request.get('_wid') %}
        require(['jquery', 'routing', 'orodatagrid/js/datagrid/listener/callback-listener', 'oroui/js/widget-manager',
            'oroform/js/multiple-entity/model', 'orolocale/js/formatter/name'],
                function($, routing, CallbackListener, WidgetManager, MultipleEntityModel, nameFormatter) {
                    var addedModels = {};
                    WidgetManager.getWidgetInstance({{ wid|json_encode|raw }}, function(widget) {
                        if (widget.options.type == 'dialog') {
                            widget.getWidget().css({
                                'padding': 0,
                                'max-height': 500,
                                'overflow': 'auto'
                            });
                        }

                        widget.getAction('select', 'adopted', function(selectBtn) {
                            selectBtn.click(function() {
                                var addedVal = $('#appendLeads').val();
                                var removedVal = $('#removeLeads').val();
                                var appendedIds = addedVal.length ? addedVal.split(',') : [];
                                var removedIds = removedVal.length ? removedVal.split(',') : [];

                                widget.trigger('completeSelection', appendedIds, addedModels, removedIds);
                            });
                        });
                    });

                    var gridName = {{ gridName|json_encode|raw }};

                    $(function () {
                        /** @type {orodatagrid.datagrid.listener.CallbackListener} */
                        new CallbackListener({
                            $gridContainer: $('[data-wid="{{ wid }}"]'),
                            gridName: gridName,
                            dataField: 'id',
                            columnName: 'hasLeads',
                            processCallback: function (value, model, listener) {

                                var isActive = model.get(listener.columnName);
                                var id = model.get('id');
                                if (isActive) {
                                    addedModels[id] = new MultipleEntityModel({
                                        'id': model.get('id'),
                                        'link': routing.generate('orocrm_sales_lead_info', {id: model.get('id')}),
                                        'label': model.get('name'),
                                        'extraData': [
                                            {
                                                'label': 'Phone',
                                                'value': model.get('phoneNumber')
                                            },
                                            {
                                                'label': 'Email',
                                                'value': model.get('email')
                                            }
                                        ]
                                    });
                                } else if (addedModels.hasOwnProperty(id)) {
                                    delete addedModels[id];
                                }
                            }
                        });
                    });
                });
    </script>

    <div class="widget-actions">
        <button type="reset" class="btn">{{ 'Cancel'|trans }}</button>
        <button type="button" class="btn btn-primary" data-action-name="select">{{ 'Select'|trans }}</button>
    </div>
</div>
