{% macro getSoapCheckerOptions(form, elSelector) %}
    {% set modificationAreAllowed = form.websiteId.vars.disabled is not defined or form.websiteId.vars.disabled == false %}
    {% set soapCheckerOptions = {
        el:                     elSelector,
        websiteSelectEl:        '#' ~ form.websiteId.vars.id,
        websitesListEl:         '#' ~ form.websites.vars.id,
        connectorsEl:           '#' ~ form.parent.connectors.vars.id,
        adminUrlEl:             '#' ~ form.adminUrl.vars.id,
        isExtensionInstalledEl: '#' ~ form.isExtensionInstalled.vars.id,
        extensionVersionEl:     '#' ~ form.extensionVersion.vars.id,
        magentoVersionEl:       '#' ~ form.magentoVersion.vars.id,

        websitesModificationAllowed: modificationAreAllowed,
        transportEntityId:           form.vars.value ? form.vars.value.id : null,
    } %}
    {{ soapCheckerOptions|json_encode|raw }}
{% endmacro %}

{% block orocrm_magento_soap_transport_check_button_widget %}
    {% set entity = form.parent.vars.value %}
    <div class="control-group">
        <div class="controls">
            <button type="{{ type|default('button') }}" {{ block('button_attributes') }}>{{ label|trans({}, translation_domain) }}</button>
            <script type="text/javascript">
                require(['orocrm/magento/soap-checker'], function (SoapChecker) {
                    "use strict";
                    new SoapChecker({{ _self.getSoapCheckerOptions(form.parent, '#' ~ form.vars.id) }});
                });
            </script>

            {% if entity is defined and entity.id is not empty %}
                {% if entity.isExtensionInstalled %}
                    {% if not entity.supportedExtensionVersion %}
                        {% set message = 'orocrm.magento.magentosoaptransport.message.outdated_brige'|trans({'%extension_version%': entity.extensionVersion}) %}
                        {% set messageType = 'warning' %}
                    {% endif %}
                {% else %}
                    {% set message = 'orocrm.magento.magentosoaptransport.message.native_soap'|trans %}
                    {% set messageType = 'info' %}
                {% endif %}

                {% if messageType is defined and message is defined %}
                    <div class="alert alert-{{ messageType }} connection-status">{{ message }}</div>
                {% endif %}
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block orocrm_magento_soap_transport_check_button_row %}
    {{ block('button_row') }}
{% endblock %}

{% block orocrm_magento_website_select_row %}
    {% spaceless %}
        <div class="control-group{% if attr.class is defined %} {{ attr.class }}{% endif %}">
            {% if label is not sameas(false) %}
                {{ form_label(form, '' , { label_attr: label_attr|merge({ class: 'control-label' })}) }}
            {% endif %}
            <div class="controls{% if errors|length > 0 %} validation-error{% endif %} magento-website-selector-container">
                {{ form_widget(form) }}
                {% if form.vars.disabled is not sameas(true) %}
                    <a href="javascript:void(0)" class="no-hash sync-website-list-link">
                        <i class="icon icon-refresh"></i>{{ 'Sync website list'|trans }}
                    </a>
                    <script type="text/javascript">
                        require(['orocrm/magento/soap-checker'], function (SoapChecker) {
                            "use strict";
                            new SoapChecker({{ _self.getSoapCheckerOptions(form.parent, '.sync-website-list-link') }});
                        });
                    </script>
                {% endif %}
                <div class="clear-fix"></div>
                {{ form_errors(form) }}
            </div>
        </div>
    {% endspaceless %}
{% endblock %}

{% block orocrm_magento_order_place_form_type_row %}
    {% set cartId = form.cart_id.vars.data %}
    {{ oro_widget_render({
        'widgetType': 'block',
        'alias': 'order-place-widget',
        'url': path('orocrm_magento_orderplace_cart', {id: cartId}),
        'loadingMaskEnabled': true
    }) }}

    <script type="text/javascript">
        require(['underscore', 'oroui/js/widget-manager'], function(_, widgetManager) {
            widgetManager.getWidgetInstanceByAlias('order-place-widget', function(widget) {
                widget._showLoading();

                widget.once('externalContentLoaded', _.bind(widget._hideLoading, widget));
            });
        });
    </script>
{% endblock %}

{% block orocrm_magento_customer_addresses_widget %}
    <div {% if form.vars.value and form.vars.value.originId %}class="collection-remove-disabled"{% endif %}>
        {{ form_widget(form) }}
    </div>
{% endblock %}

{% block orocrm_magento_metrics_row %}
    <div class="grid-container">
        <table id="{{ form.vars.id }}" class="grid table table-bordered table-condensed">
            <thead>
                <tr>
                    <th><span>{{ 'orocrm.magento.datagrid.columns.show'|trans }}</span></th>
                    <th><span>{{ 'orocrm.magento.datagrid.columns.metricName'|trans }}</span></th>
                    <th><span>{{ 'orocrm.magento.datagrid.columns.sort'|trans }}</span></th>
                </tr>
            </thead>
            <tbody class="item-container"></tbody>
        </table>
    </div>
    <script>
        require([
            'backbone',
            'oroui/js/items-manager/table'
        ], function (Backbone) {
            var metricsData = {{ form.children.metrics.vars.value|json_encode|raw }};
            var baseName = {{ form.children.metrics.vars.full_name|json_encode|raw }};
            var itemContainerSelector = '#' + {{ form.vars.id|json_encode|raw }} + ' .item-container';

            var ItemModel = Backbone.Model.extend({
                defaults: {
                    id: null,
                    label: null,
                    show: true,
                    order: 1,
                    namePrefix: '',
                }
            });

            var ItemCollection = Backbone.Collection.extend({
                model: ItemModel
            });

            var items = new ItemCollection(metricsData);
            items.each(function (item, index) {
                item.set('namePrefix', baseName + '[' + index + ']');
            });

            var $itemContainer = $(itemContainerSelector);
            items.on('sort', function () {
                $itemContainer.find('input.order').each(function (index) {
                    $(this).val(index);
                });
            });

            $itemContainer.itemsManagerTable({
                itemTemplate: $('#magento-big-numbers-metric-template').html(),
                collection: items,
            });
        });
    </script>
    <script id="magento-big-numbers-metric-template" type="text/template">
        <tr data-cid="<%= cid %>">
            <td>
                <input type="checkbox" name="<%= namePrefix %>[show]" <%= show ? 'checked' : '' %>>
            </td>
            <td><%= label %></td>
            <td>
                <input type="hidden" name="<%= namePrefix %>[id]" value="<%= id %>">
                <input type="hidden" class="order" name="<%= namePrefix %>[order]" value="<%= order %>">
                <span title="{{ 'orocrm.magento.datagrid.actions.move_column.label'|trans }}">
                    <i class="icon-list handle"></i>
                </span>
            </td>
        </tr>
    </script>
{% endblock %}
